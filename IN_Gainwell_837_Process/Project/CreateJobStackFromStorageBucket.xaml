<Activity mc:Ignorable="sap sap2010" x:Class="LoadQueue" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:hm="clr-namespace:HelpAtHome_RPA_Utilities.Messaging;assembly=HelpAtHome RPA Utilities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ucas="clr-namespace:UiPath.Core.Activities.Storage;assembly=UiPath.System.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="InputFile" Type="OutArgument(x:String)" />
    <x:Property Name="resumeLogFilepath" Type="InArgument(x:String)" />
    <x:Property Name="workLibrary" Type="OutArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="WorkLibraryFilePath" Type="InArgument(x:String)" />
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="dt" Type="OutArgument(sd:DataTable)" />
    <x:Property Name="ProcessingFolderPath" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1039.2,2990.4</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>LoadQueue_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.Core.Activities.Storage</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.CSV</x:String>
      <x:String>UiPath.CSV.Activities</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
      <x:String>HelpAtHome_RPA_Utilities.Messaging</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>HelpAtHome RPA Utilities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Database.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="While there are storage files and we havent seen a valid file , we keep checking until we have gone throught the entire list of storage files.&#xA;upon discovery of a valid file , we exit the loop" DisplayName="LoadQueue" sap:VirtualizedContainerService.HintSize="756.8,2925.6" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="errorMessage" />
      <Variable x:TypeArguments="x:String" Name="sheetName" />
      <Variable x:TypeArguments="scg:IEnumerable(ucas:StorageFileInfo)" Name="storageBucketFiles" />
      <Variable x:TypeArguments="x:Boolean" Name="validFileFound" />
      <Variable x:TypeArguments="ucas:StorageFileInfo" Name="storageFile" />
      <Variable x:TypeArguments="x:String" Name="response" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:SetAsset AssetName="[in_Config(&quot;StorageBucketLockName&quot;).ToString()]" DisplayName="Lock the Storage Bucket" FolderPath="[in_Config(&quot;OrchestratorQueueFolder&quot;).ToString()]" sap:VirtualizedContainerService.HintSize="694.4,195.2" sap2010:WorkflowViewState.IdRef="SetAsset_1" Value="[&quot;LOCKED BY &quot;+Environment.MachineName]">
      <ui:SetAsset.TimeoutMS>
        <InArgument x:TypeArguments="x:Int32" />
      </ui:SetAsset.TimeoutMS>
    </ui:SetAsset>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Formats the error screenshot folder path so that there are no residues in them" DisplayName="Format Temps folder" sap:VirtualizedContainerService.HintSize="694.4,157.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_11" UnSafe="False" WorkflowFileName="Reusable_Components\FormatFolderPath.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_FolderPath">[in_Config("TempsFolderPath").ToString()]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Formats Processing Folder Path" DisplayName="Format Processing folder" sap:VirtualizedContainerService.HintSize="694.4,144.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="Reusable_Components\FormatFolderPath.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_FolderPath">[in_Config("ProcessingFolderPath").ToString()]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <ucas:ListStorageFiles Filter="{x:Null}" TimeoutMS="{x:Null}" Directory="/" DisplayName="List Storage Files" sap:VirtualizedContainerService.HintSize="694.4,134.4" sap2010:WorkflowViewState.IdRef="ListStorageFiles_1" Recursive="True" Result="[storageBucketFiles]" StorageBucketName="IN_Gainwell_837" />
    <If sap2010:Annotation.AnnotationText="Storage bucket has files which should be uploaded into queue" Condition="[storageBucketFiles IsNot Nothing AndAlso storageBucketFiles.Count &gt; 0]" sap:VirtualizedContainerService.HintSize="694.4,1544" sap2010:WorkflowViewState.IdRef="If_3">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="660.8,1279.2" sap2010:WorkflowViewState.IdRef="Sequence_22">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence sap2010:Annotation.AnnotationText="While there are storage files and we havent seen a valid file , we keep checking until we have gone throught the entire list of storage files.&#xA;upon discovery of a valid file , we exit the loop" sap:VirtualizedContainerService.HintSize="617.6,1189.6" sap2010:WorkflowViewState.IdRef="Sequence_21">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:Int32" Name="n" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InterruptibleWhile sap2010:Annotation.AnnotationText="While there are storage files and we havent seen a valid file , we keep checking until we have gone throught the entire list of storage files.&#xA;upon discovery of a valid file , we exit the loop" Condition="[(n &lt; storageBucketFiles.Count) AndAlso Not validFileFound]" CurrentIndex="[n]" DisplayName="While" sap:VirtualizedContainerService.HintSize="555.2,1017.6" sap2010:WorkflowViewState.IdRef="InterruptibleWhile_1">
              <ui:InterruptibleWhile.Body>
                <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="521.6,836.8" sap2010:WorkflowViewState.IdRef="Sequence_31">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="478.4,148" sap2010:WorkflowViewState.IdRef="MultipleAssign_2">
                    <ui:MultipleAssign.AssignOperations>
                      <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="ucas:StorageFileInfo">[storageFile]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="ucas:StorageFileInfo">[storageBucketFiles(0)]</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="x:String">[InputFile]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="x:String">[Path.Combine(in_Config("TempsFolderPath").ToString(),Path.GetFileName(storageFile.FileFullPath))]</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                      </scg:List>
                    </ui:MultipleAssign.AssignOperations>
                  </ui:MultipleAssign>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Formats the error screenshot folder path so that there are no residues in them" DisplayName="Format Temps folder" sap:VirtualizedContainerService.HintSize="478.4,157.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" UnSafe="False" WorkflowFileName="Reusable_Components\FormatFolderPath.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="in_FolderPath">[in_Config("TempsFolderPath").ToString()]</InArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:InvokeWorkflowFile>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Formats Incoming Folder Path" DisplayName="Format Processing folder" sap:VirtualizedContainerService.HintSize="478.4,144.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_14" UnSafe="False" WorkflowFileName="Reusable_Components\FormatFolderPath.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="in_FolderPath">[in_Config("ProcessingFolderPath").ToString()]</InArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:InvokeWorkflowFile>
                  <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="478.4,52.8" sap2010:WorkflowViewState.IdRef="TryCatch_2">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <TryCatch.Try>
                      <Sequence sap2010:Annotation.AnnotationText="Only download excel files" sap:VirtualizedContainerService.HintSize="635.2,2704.8" sap2010:WorkflowViewState.IdRef="Sequence_18">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If sap2010:Annotation.AnnotationText="Only download excel files" Condition="[Path.GetExtension(storageFile.FileFullPath).ToLower().Equals(&quot;.xlsx&quot;) Or Path.GetExtension(storageFile.FileFullPath).ToLower().Equals(&quot;.xls&quot;)]" sap:VirtualizedContainerService.HintSize="572.8,2561.6" sap2010:WorkflowViewState.IdRef="If_7">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Sequence sap:VirtualizedContainerService.HintSize="539.2,2016.8" sap2010:WorkflowViewState.IdRef="Sequence_16">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Sequence sap:VirtualizedContainerService.HintSize="496,1927.2" sap2010:WorkflowViewState.IdRef="Sequence_30">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ucas:DownloadStorageFile TimeoutMS="{x:Null}" Destination="[InputFile]" DisplayName="Download Storage File" sap:VirtualizedContainerService.HintSize="433.6,134.4" sap2010:WorkflowViewState.IdRef="DownloadStorageFile_3" Path="[storageFile.FileFullPath]" StorageBucketName="IN_Gainwell_837" />
                                <ui:ExcelApplicationScope Password="{x:Null}" AutoSave="False" CreateNewFile="False" DisplayName="Excel Application Scope" sap:VirtualizedContainerService.HintSize="433.6,52.8" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_3" InstanceCachePeriod="3000" Visible="False" WorkbookPath="[InputFile]">
                                  <ui:ExcelApplicationScope.Body>
                                    <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                                      </ActivityAction.Argument>
                                      <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="449.6,292.8" sap2010:WorkflowViewState.IdRef="Sequence_27">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:ExcelGetWorkbookSheet DisplayName="Get Workbook Sheet" sap:VirtualizedContainerService.HintSize="387.2,80.8" sap2010:WorkflowViewState.IdRef="ExcelGetWorkbookSheet_3" Index="0" Sheet="[sheetName]" />
                                        <ui:ExcelReadRange AddHeaders="True" DataTable="[dt]" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="387.2,60" sap2010:WorkflowViewState.IdRef="ExcelReadRange_3" SheetName="[sheetName]">
                                          <ui:ExcelReadRange.Range>
                                            <InArgument x:TypeArguments="x:String">
                                              <Literal x:TypeArguments="x:String" Value="" />
                                            </InArgument>
                                          </ui:ExcelReadRange.Range>
                                        </ui:ExcelReadRange>
                                      </Sequence>
                                    </ActivityAction>
                                  </ui:ExcelApplicationScope.Body>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:ExcelApplicationScope>
                                <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#xA;&#x9;workLibrary = New Dictionary(Of String,Object)&#xA;&#x9;Dim RequriedDateFormat = &quot;MM/dd/yyyy&quot;&#xA;&#x9;Dim sd As Date&#xA;&#x9;Dim ed As Date&#xA;&#xA;If DateTime.TryParseExact(InputDate.Split(&quot;_&quot;c)(0),&quot;ddMMyyyy&quot;,Nothing,Nothing,sd) AndAlso DateTime.TryParseExact(InputDate.Split(&quot;_&quot;c)(1),&quot;ddMMyyyy&quot;,Nothing,Nothing,ed) Then&#xA;&#x9;&#x9;workLibrary(&quot;BatchStartDate&quot;) = sd.ToString(RequriedDateFormat)&#xA;&#x9;&#x9;workLibrary(&quot;BatchEndDate&quot;) = ed.ToString(RequriedDateFormat)&#xA;&#x9;&#x9;workLibrary(&quot;TransactionStamp&quot;)  =  sd.ToString(&quot;ddMMMyyyy&quot;)+&quot;_&quot;+ed.ToString(&quot;ddMMMyyyy&quot;)&#xA;Else&#xA;&#x9;&#x9;Throw New SystemException(&quot;Please excel in storage bucket should have a sheet name matching the desired date in the format [ddMMyyyy_ddMMyyyy]&quot;)&#xA;End If&#xA;&#xA;Dim a As String() = workLibrary.AsEnumerable().Select(Function(x)x.Key+&quot;|&quot;+x.Value.ToString).ToArray()&#xA;File.WriteAllLines(WorkLibraryFilePath,a)&#xA;&#xA;Catch ex As Exception&#xA;&#x9;errorMessaage = ex.Message&#xA;End Try" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="433.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_4">
                                  <ui:InvokeCode.Arguments>
                                    <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="workLibrary">[workLibrary]</OutArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="WorkLibraryFilePath">[WorkLibraryFilePath]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="InputDate">[sheetName]</InArgument>
                                    <InOutArgument x:TypeArguments="x:String" x:Key="errorMessaage">[errorMessage]</InOutArgument>
                                  </ui:InvokeCode.Arguments>
                                </ui:InvokeCode>
                                <If Condition="[Not String.IsNullOrEmpty(errorMessage)]" sap:VirtualizedContainerService.HintSize="433.6,52.8" sap2010:WorkflowViewState.IdRef="If_8">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <If.Then>
                                    <Sequence sap:VirtualizedContainerService.HintSize="377.6,180" sap2010:WorkflowViewState.IdRef="Sequence_28">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <Throw Exception="[New SystemException(errorMessage)]" sap:VirtualizedContainerService.HintSize="334.4,90.4" sap2010:WorkflowViewState.IdRef="Throw_7" />
                                    </Sequence>
                                  </If.Then>
                                  <If.Else>
                                    <Sequence sap:VirtualizedContainerService.HintSize="376.8,203.2" sap2010:WorkflowViewState.IdRef="Sequence_24">
                                      <Sequence.Variables>
                                        <Variable x:TypeArguments="x:String" Name="subfolderInDumps" />
                                      </Sequence.Variables>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="QuickCreateSubFolder.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="333.6,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_9" UnSafe="False" WorkflowFileName="Reusable_Components\QuickCreateSubFolder.xaml">
                                        <ui:InvokeWorkflowFile.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="DirectoryPath">[in_Config("DumpsFolderPath").ToString()]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="SubFolderName">[workLibrary("TransactionStamp").ToString()]</InArgument>
                                          <OutArgument x:TypeArguments="x:String" x:Key="SubFolderFullFilePath">[subfolderInDumps]</OutArgument>
                                        </ui:InvokeWorkflowFile.Arguments>
                                      </ui:InvokeWorkflowFile>
                                    </Sequence>
                                  </If.Else>
                                </If>
                                <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#xA;If dt IsNot Nothing AndAlso dt.Rows.Count &gt; 0 Then&#xA;'first correct all the column names &#xA;For Each c As DataColumn In dt.Columns&#xA;&#x9;c.ColumnName =  c.ColumnName.Replace(&quot; &quot;,String.Empty).ToLower()&#xA;Next&#xA;'rearrage columns&#xA;Dim expectedCols As String() =  {&quot;office&quot;,&quot;payer&quot;,&quot;formtype&quot;,&quot;ftpserver&quot;}&#xA;For Each ec As String In expectedCols&#xA;dt.Columns(ec).SetOrdinal(Array.IndexOf(expectedCols,ec))&#xA;Next&#xA;'sort table&#xA;dt = dt.AsEnumerable.OrderBy(Function(x) x(&quot;office&quot;)).CopyToDataTable&#xA;&#xA;'dt.Columns.Add(&quot;Transaction_Id&quot;,GetType(Object)).SetOrdinal(0)&#xA;dt.Columns.Add(&quot;BatchedFile&quot;,GetType(String))&#xA;dt.Columns.Add(&quot;BatchNumber&quot;,GetType(String))&#xA;dt.Columns.Add(&quot;BatchDate&quot;,GetType(String))&#xA;dt.Columns.Add(&quot;DestinationSubFolder&quot;,GetType(String))&#xA;dt.Columns.Add(&quot;FileNameMemonic&quot;,GetType(String)).SetOrdinal(0) 'set as first item&#xA;dt.Columns.Add(&quot;ErrorStatus&quot;,GetType(String))&#xA;dt.Columns.Add(&quot;ActualFileName&quot;,GetType(String))&#xA;'the table to hold items that would be treated&#xA;Dim dtWorkLoad As DataTable = dt.Clone()&#xA;'Load all batched items&#xA;Dim AlreadyBatchedItems As String() = New String(){}&#xA;If File.Exists(BatchLogFilePath) Then&#xA;&#x9;AlreadyBatchedItems = File.ReadAllLines(BatchLogFilePath).ToArray()&#xA;End If&#xA;&#xA;For Each row As DataRow In dt.Rows&#xA;&#x9;'remove commas to avoid issues&#xA;&#x9;For Each col As String In {&quot;office&quot;,&quot;payer&quot;,&quot;formtype&quot;,&quot;ftpserver&quot;}&#xA;&#x9;&#x9;row(col) = row(col).ToString().Replace(&quot;,&quot;,String.Empty)&#xA;&#x9;Next&#xA;&#x9;&#xA;&#x9;'Folder names and file names should not cotain forbiden special characters or spaces. &#xA;&#x9;'since we are Using office name And payer name which could be anything we need To remove special characters And spaces here&#xA;&#x9;'row(&quot;Transaction_Id&quot;) = &quot;00&quot;+(dt.Rows.IndexOf(row)+1).ToString()&#xA;&#x9;Dim _officeName As String = System.Text.RegularExpressions.Regex.Replace(row(&quot;office&quot;).ToString(), &quot;[^a-z A-Z 0-9]&quot;, String.Empty)&#xA;&#x9;_officeName = System.Text.RegularExpressions.Regex.Replace(_officeName, &quot; {2,}&quot;, &quot; &quot;).Replace(&quot; &quot;,String.Empty)&#xA;&#xA;&#x9;Dim _payerName As String = System.Text.RegularExpressions.Regex.Replace(row(&quot;payer&quot;).ToString(), &quot;[^a-z A-Z 0-9]&quot;, String.Empty)&#xA;&#x9;_payerName = System.Text.RegularExpressions.Regex.Replace(_payerName, &quot; {2,}&quot;, &quot; &quot;).Replace(&quot; &quot;,String.Empty)&#xA;&#x9;row(&quot;DestinationSubFolder&quot;) = _payerName&#xA;&#x9;row(&quot;FileNameMemonic&quot;) = (_officeName+&quot;_&quot;+_payerName+&quot;_&quot;+TransactionStamp).ToLower()&#xA;&#x9;&#xA;&#x9;Dim previouslyBatchedData As String = AlreadyBatchedItems.FirstOrDefault(Function(x) x.StartsWith(row(&quot;FileNameMemonic&quot;).ToString()))&#xA;&#x9;If Not String.IsNullOrEmpty(previouslyBatchedData) Then&#xA;&#x9;&#x9;'add from previously batched to workload&#xA;&#x9;&#x9;dtWorkLoad.Rows.Add(previouslyBatchedData.Split(&quot;,&quot;c).Select(Function(x)CObj(x)).ToArray())&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;'import from new request to workload&#xA;&#x9;&#x9;dtWorkLoad.ImportRow(row)&#x9;&#xA;&#x9;End If&#xA;&#xA; dt = dtWorkLoad&#x9;&#xA;Next&#xA;&#xA;End If&#xA;Catch ex As Exception&#xA;&#x9;errorMessaage = ex.Message&#xA;End Try" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="433.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_5">
                                  <ui:InvokeCode.Arguments>
                                    <InOutArgument x:TypeArguments="sd:DataTable" x:Key="dt">[dt]</InOutArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="resumeLogFilePath">[resumeLogFilepath]</InArgument>
                                    <InOutArgument x:TypeArguments="x:String" x:Key="errorMessaage">[errorMessage]</InOutArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TransactionStamp">[workLibrary("TransactionStamp").ToString()]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="BatchLogFilePath">[Path.Combine(in_Config("LogsFolderPath").ToString(),workLibrary("TransactionStamp").ToString(),"BatchLog.csv")]</InArgument>
                                  </ui:InvokeCode.Arguments>
                                </ui:InvokeCode>
                                <If Condition="[Not String.IsNullOrEmpty(errorMessage)]" sap:VirtualizedContainerService.HintSize="433.6,52.8" sap2010:WorkflowViewState.IdRef="If_10">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <If.Then>
                                    <Sequence sap:VirtualizedContainerService.HintSize="377.6,180" sap2010:WorkflowViewState.IdRef="Sequence_29">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <Throw Exception="[New SystemException(errorMessage)]" sap:VirtualizedContainerService.HintSize="334.4,90.4" sap2010:WorkflowViewState.IdRef="Throw_9" />
                                    </Sequence>
                                  </If.Then>
                                  <If.Else>
                                    <Sequence sap:VirtualizedContainerService.HintSize="300,82.4" sap2010:WorkflowViewState.IdRef="Sequence_26">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </Sequence>
                                  </If.Else>
                                </If>
                                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Formats the error screenshot folder path so that there are no residues in them" DisplayName="Format Error Screenshot" sap:VirtualizedContainerService.HintSize="433.6,157.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_10" UnSafe="False" WorkflowFileName="Reusable_Components\FormatFolderPath.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_FolderPath">
                                      <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ExScreenshotsFolderPath&quot;).ToString()" />
                                    </InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:InvokeWorkflowFile>
                                <ui:WriteCsvFile AddHeaders="True" DataTable="[dt]" Delimitator="Comma" DisplayName="Write CSV" FilePath="[resumeLogFilepath]" sap:VirtualizedContainerService.HintSize="433.6,155.2" sap2010:WorkflowViewState.IdRef="WriteCsvFile_3" ShouldQuote="True" />
                                <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="433.6,142.4" sap2010:WorkflowViewState.IdRef="LogMessage_11" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Job tracker created&quot;]" />
                                <ucas:DeleteStorageFile TimeoutMS="{x:Null}" DisplayName="Delete Storage File" sap:VirtualizedContainerService.HintSize="433.6,134.4" sap2010:WorkflowViewState.IdRef="DeleteStorageFile_1" Path="[storageFile.FileFullPath]" StorageBucketName="IN_Gainwell_837" />
                                <Assign sap:VirtualizedContainerService.HintSize="433.6,81.6" sap2010:WorkflowViewState.IdRef="Assign_3">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:String">[response]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String">[response+" | "+storageFile.FileFullPath+" : "+ dt.Rows.Count.ToString+" items to batch and finalize."]</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <Assign sap:VirtualizedContainerService.HintSize="433.6,81.6" sap2010:WorkflowViewState.IdRef="Assign_6">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Boolean">[validFileFound]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                  </Assign.Value>
                                </Assign>
                              </Sequence>
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence sap:VirtualizedContainerService.HintSize="377.6,362.4" sap2010:WorkflowViewState.IdRef="Sequence_17">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334.4,142.4" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Warn" Message="[storageFile.FileFullPath+&quot; is not a .xlsx or .xls file&quot;]" />
                              <Throw Exception="[New SystemException(storageFile.FileFullPath+&quot; is not a .xlsx or .xls file&quot;)]" sap:VirtualizedContainerService.HintSize="334.4,90.4" sap2010:WorkflowViewState.IdRef="Throw_6" />
                            </Sequence>
                          </If.Else>
                        </If>
                      </Sequence>
                    </TryCatch.Try>
                    <TryCatch.Catches>
                      <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="452.8,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ActivityAction x:TypeArguments="s:Exception">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                          </ActivityAction.Argument>
                          <Sequence sap:VirtualizedContainerService.HintSize="499.2,556.8" sap2010:WorkflowViewState.IdRef="Sequence_19">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <TryCatch sap2010:Annotation.AnnotationText="Try to delete storage file" DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="436.8,84" sap2010:WorkflowViewState.IdRef="TryCatch_1">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <TryCatch.Try>
                                <ucas:DeleteStorageFile TimeoutMS="{x:Null}" DisplayName="Delete Storage File" sap:VirtualizedContainerService.HintSize="334.4,134.4" sap2010:WorkflowViewState.IdRef="DeleteStorageFile_2" Path="[storageFile.FileFullPath]" StorageBucketName="Re_Authorization" />
                              </TryCatch.Try>
                              <TryCatch.Catches>
                                <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="403.2,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ActivityAction x:TypeArguments="s:Exception">
                                    <ActivityAction.Argument>
                                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                    </ActivityAction.Argument>
                                  </ActivityAction>
                                </Catch>
                              </TryCatch.Catches>
                            </TryCatch>
                            <Assign sap:VirtualizedContainerService.HintSize="436.8,80.8" sap2010:WorkflowViewState.IdRef="Assign_4">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[response]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String" xml:space="preserve">[response+" | "+storageFile.FileFullPath+" : "+  exception.Message]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </ActivityAction>
                      </Catch>
                    </TryCatch.Catches>
                  </TryCatch>
                  <TryCatch sap2010:Annotation.AnnotationText="Send Teams Notification here" DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="478.4,84" sap2010:WorkflowViewState.IdRef="TryCatch_3">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <TryCatch.Try>
                      <hm:SendTeamsChannelMessage sap:VirtualizedContainerService.HintSize="334.4,90.4" sap2010:WorkflowViewState.IdRef="SendTeamsChannelMessage_1" teamsMessage="[File.ReadAllText(&quot;Data\EmailTemplates\TeamsNotification.txt&quot;).Replace(&quot;ProcessName&quot;,in_Config(&quot;ProcessName&quot;).ToString()).Replace(&quot;ReportDate&quot;,Now.ToString(&quot;ddMMMyyyy HH:mm:ss&quot;)).Replace(&quot;MachineName&quot;,System.Environment.MachineName).Replace(&quot;Response&quot;,response)]" />
                    </TryCatch.Try>
                    <TryCatch.Catches>
                      <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="403.2,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_3">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ActivityAction x:TypeArguments="s:Exception">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                          </ActivityAction.Argument>
                        </ActivityAction>
                      </Catch>
                    </TryCatch.Catches>
                  </TryCatch>
                </Sequence>
              </ui:InterruptibleWhile.Body>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InterruptibleWhile>
          </Sequence>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap:VirtualizedContainerService.HintSize="300,82.4" sap2010:WorkflowViewState.IdRef="Sequence_23">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Sequence>
      </If.Else>
    </If>
    <ui:SetAsset AssetName="[in_Config(&quot;StorageBucketLockName&quot;).ToString()]" DisplayName="Release the Storage Bucket" FolderPath="[in_Config(&quot;OrchestratorQueueFolder&quot;).ToString()]" sap:VirtualizedContainerService.HintSize="694.4,195.2" sap2010:WorkflowViewState.IdRef="SetAsset_2" Value="[&quot;RELEASED&quot;]">
      <ui:SetAsset.TimeoutMS>
        <InArgument x:TypeArguments="x:Int32" />
      </ui:SetAsset.TimeoutMS>
    </ui:SetAsset>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="694.4,142.4" sap2010:WorkflowViewState.IdRef="LogMessage_10" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Create Job Stack From Bucket has finished &quot;]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:LogMessage>
  </Sequence>
</Activity>